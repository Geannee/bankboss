/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.42
 * Generated at: 2025-06-27 15:01:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"pt-br\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>Área do Cliente</title>\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("    <link rel=\"stylesheet\" href=\"../styles/bootstrap.css\">\n");
      out.write("    <link rel=\"stylesheet\" href=\"../styles/index.css\">\n");
      out.write("    <style>\n");
      out.write(" /* Configuração da tela dividida */\n");
      out.write("        .container-fluid {\n");
      out.write("            display: flex;\n");
      out.write("            height: 100vh;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Logo à esquerda */\n");
      out.write("        .logo-container {\n");
      out.write("            width: 50%;\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: center;\n");
      out.write("            align-items: center;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Formulário à direita */\n");
      out.write("        .form-container {\n");
      out.write("            width: 50%;\n");
      out.write("            display: flex;\n");
      out.write("            justify-content: center;\n");
      out.write("            align-items: center;\n");
      out.write("            padding: 20px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Adicionando uma pequena margem ao conteúdo do formulário */\n");
      out.write("        .form-content {\n");
      out.write("            width: 100%;\n");
      out.write("            max-width: 400px;\n");
      out.write("            display: flex;\n");
      out.write("            flex-direction: column;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Estilização do título */\n");
      out.write("        h1 {\n");
      out.write("           \n");
      out.write("            font-family: myfonte, progressive soul;\n");
      out.write("            src: url('./https://www.dafont.com/progressive-soul.font');\n");
      out.write("            font-size: 42px;\n");
      out.write("            color: #F28706;\n");
      out.write("            font-weight: bold;\n");
      out.write("            margin-bottom: -150px; /* Espaçamento entre o título e o formulário */\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Fundo azulado do formulário */\n");
      out.write("        .form-background {\n");
      out.write("            background-color: #1E71A6; /* Cor azul escura */\n");
      out.write("            padding: 20px; /* Espaçamento interno ao redor do formulário */\n");
      out.write("            border-radius: 8px; /* Deixa o fundo com bordas arredondadas */\n");
      out.write("        }\n");
      out.write("        .form-background .form-label {\n");
      out.write("            color: #1E71A6; /* Cor branca para as labels */\n");
      out.write("        }\n");
      out.write("        /* Adicionar um fundo de cor ou gradiente se necessário */\n");
      out.write("       .container-fluid {\n");
      out.write("            display: flex;\n");
      out.write("            height: 100vh; /* Garante que o container ocupe a altura total da viewport */\n");
      out.write("            width: 100vw; /* Garante que o container ocupe a largura total da viewport */\n");
      out.write("            \n");
      out.write("            /* -------- AQUI VOCÊ VAI INSERIR SEU PNG COMO BACKGROUND -------- */\n");
      out.write("            background-image: url('Prancheta 1.png');\n");
      out.write("            background-size: cover; /* Faz a imagem cobrir todo o elemento, cortando se necessário */\n");
      out.write("            background-position: center center; /* Centraliza a imagem no elemento */\n");
      out.write("            background-repeat: no-repeat; /* Evita que a imagem se repita */\n");
      out.write("            background-attachment: fixed; /* Opcional: fixa a imagem de background para que ela não role com o conteúdo */\n");
      out.write("            \n");
      out.write("            background-color: #112E4F; \n");
      out.write("        }\n");
      out.write("         button {\n");
      out.write("            margin-top: 25px;\n");
      out.write("            width: 100%;\n");
      out.write("            padding: 12px;\n");
      out.write("            background-color: #F28706;\n");
      out.write("            color: white;\n");
      out.write("            font-size: 16px;\n");
      out.write("            border: none;\n");
      out.write("            border-radius: 5px;\n");
      out.write("            cursor: pointer;\n");
      out.write("          }\n");
      out.write("\n");
      out.write("          button:hover {\n");
      out.write("            background-color: #1e40af;\n");
      out.write("          }\n");
      out.write("\n");
      out.write("          footer {\n");
      out.write("            background-color: #111827;\n");
      out.write("            color: #9ca3af;\n");
      out.write("            text-align: center;\n");
      out.write("            padding: 15px;\n");
      out.write("            font-size: 13px;\n");
      out.write("          }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"container-fluid min-vh-150 d-flex\">\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        <div class=\"logo-container d-flex flex-column justify-content-center align-items-center\">\n");
      out.write("            \n");
      out.write("            <div class=\"logo-container d-flex flex-column justify-content-center align-items-center\">\n");
      out.write("                <img src=\"Bankboss.png\" alt=\"Bankboss.png\"class=\"img-fluid\" style=\"max-width: 600px;\"/>\n");
      out.write("   \n");
      out.write("</div>\n");
      out.write("     \n");
      out.write("              \n");
      out.write("        </div>\n");
      out.write("        <!-- Formulário à direita -->\n");
      out.write("        <div class=\"form-container d-flex justify-content-center align-items-center\">\n");
      out.write("            <div class=\"form-content\">\n");
      out.write("                <!-- Título -->\n");
      out.write("                <h1 class=\"text-center mb-4\">BankBoss </h1>\n");
      out.write("                \n");
      out.write("                <!-- Fundo azulado do formulário -->\n");
      out.write("                <div class=\"form-background\">\n");
      out.write("                    <form id=\"CPF\" style=\"width: 100%; max-width: 400px;\" class=\"mb-3\">\n");
      out.write("                        <div class=\"mb-3\">\n");
      out.write("                            <label for=\"cpf\" class=\"form-label\">CPF</label>\n");
      out.write("                            <input type=\"text\" class=\"form-control\" id=\"cpf\" placeholder=\"Digite seu CPF\" maxlength=\"14\" name=\"cpf  \">\n");
      out.write("                        </div>\n");
      out.write("                        <div class=\"mb-3\">\n");
      out.write("                            <label for=\"senha\" class=\"form-label\">SENHA</label>\n");
      out.write("                            <input type=\"senha\" class=\"form-control\" id=\"senha\" placeholder=\"informe sua senha\">\n");
      out.write("                        </div>\n");
      out.write("                        <button type=\"submit\"><a href=\"view/inicio.jsp\">Cadastrar Cliente</button>\n");
      out.write("                        \n");
      out.write("                       <button type=\"button\" class=\"exit-btn\" onclick=\"window.close()\">Sair</button>\n");
      out.write("                    </form>\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
